<languageVersion : 1.0;>

kernel crok_fast_grain
<   namespace : "pyre";
    vendor : "pyre";
    version : 1;
>
{
/*
Film Grain post-process shader v1.1	
Martins Upitis (martinsh) devlog-martinsh.blogspot.com
2013

--------------------------
This work is licensed under a Creative Commons Attribution 3.0 Unported License.
So you are free to share, modify and adapt it for your needs, and even use it for commercial use.
I would also love to hear about a project you are using it.

Have fun,
Martins
--------------------------

Perlin noise shader by toneburst:
http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/
*/

input image4 source; //rendered scene sampler
output pixel4 dst;
parameter float grain_size< displayName: "Grain size"; defaultValue: 2.0; minValue: 1.5; maxValue: 2.5;>; //grain particle size (1.5 - 2.5)
parameter float grainamount< displayName: "Grain amount"; defaultValue: 0.05; minValue: 0.0; maxValue: 10.0;>; //0.05 grain amount
parameter bool colored< displayName: "Colored"; defaultValue: false;>;
parameter float coloramount< displayName: "Colour Amount"; defaultValue: 0.6; minValue: 0.0; maxValue:1.0;>;
parameter float lumamount< displayName: "Luma Amount"; defaultValue: 1.0; minValue:0.0; maxValue: 1.0;>;

parameter float2 size< displayName:"size"; parameterType: "inputSize"; >;

parameter float timer< parameterType: "time"; >;

const float permTexUnit = 1.0/256.0;		// Perm texture texel-size
const float permTexUnitHalf = 0.5/256.0;	// Half perm texture texel-size

 
    
//a random texture generator, but you can also use a pre-computed perturbation texture
float4 rnm(float2 tc) 
{
    float noise =  sin(dot(tc + float2(timer*0.05,timer*0.05),float2(12.9898,78.233))) * 43758.5453;

	float noiseR =  fract(noise)*2.0-1.0;
	float noiseG =  fract(noise*1.2154)*2.0-1.0; 
	float noiseB =  fract(noise*1.3453)*2.0-1.0;
	float noiseA =  fract(noise*1.3647)*2.0-1.0;
	
	return float4(noiseR,noiseG,noiseB,noiseA);
}


float rand(float2 co)
{
    float a = 12.9898;
    float b = 78.233;
    float c = 43758.5453;
    float dt= dot(co.xy ,float2(a,b));
    float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

//good for large clumps of smooth looking noise, but too repetitive
//for small grains
float fastNoise(float2 n) {
	const float2 d = float2(0.0, 1.0);
	float2 b = floor(n), f = smoothStep(float2(0.0), float2(1.0), fract(n));
	return mix(mix(rand(b), rand(b + d.yx ), f.x), mix(rand(b + d.xy ), rand(b + d.yy ), f.x), f.y);
}

float fade(float t) {
	return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float pnoise3D(float3 p)
{

	float3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel
	// and offset 1/2 texel to sample texel centers
	float3 pf = fract(p);     // Fractional part for interpolation

	// Noise contributions from (x=0, y=0), z=0 and z=1
	float perm00 = rnm(pi.xy).a ;
	float3  grad000 = rnm(float2(perm00, pi.z)).rgb * 4.0 - 1.0;
	float n000 = dot(grad000, pf);
	float3  grad001 = rnm(float2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n001 = dot(grad001, pf - float3(0.0, 0.0, 1.0));

	// Noise contributions from (x=0, y=1), z=0 and z=1
	float perm01 = rnm(pi.xy + float2(0.0, permTexUnit)).a ;
	float3  grad010 = rnm(float2(perm01, pi.z)).rgb * 4.0 - 1.0;
	float n010 = dot(grad010, pf - float3(0.0, 1.0, 0.0));
	float3  grad011 = rnm(float2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n011 = dot(grad011, pf - float3(0.0, 1.0, 1.0));

	// Noise contributions from (x=1, y=0), z=0 and z=1
	float perm10 = rnm(pi.xy + float2(permTexUnit, 0.0)).a ;
	float3  grad100 = rnm(float2(perm10, pi.z)).rgb * 4.0 - 1.0;
	float n100 = dot(grad100, pf - float3(1.0, 0.0, 0.0));
	float3  grad101 = rnm(float2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n101 = dot(grad101, pf - float3(1.0, 0.0, 1.0));

	// Noise contributions from (x=1, y=1), z=0 and z=1
	float perm11 = rnm(pi.xy + float2(permTexUnit, permTexUnit)).a ;
	float3  grad110 = rnm(float2(perm11, pi.z)).rgb * 4.0 - 1.0;
	float n110 = dot(grad110, pf - float3(1.0, 1.0, 0.0));
	float3  grad111 = rnm(float2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n111 = dot(grad111, pf - float3(1.0, 1.0, 1.0));

	// Blend contributions along x
	float4 n_x = mix(float4(n000, n001, n010, n011), float4(n100, n101, n110, n111), fade(pf.x));

	// Blend contributions along y
	float2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));

	// Blend contributions along z
	float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));

	// We're done, return the final noise value.
	return n_xyz;
}

//2d coordinate orientation thing
float2 coordRot(float2 tc, in float angle)
{
	float aspect = size.x/size.y;
	float rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));
	float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));
	rotX = ((rotX/aspect)*0.5+0.5);
	rotY = rotY*0.5+0.5;
	return float2(rotX,rotY);
}

void evaluatePixel() 
{
	float2 texCoord = outCoord();
	
	float3 rotOffset = float3(1.425,3.892,5.835); //rotation offset values	
	float2 rotCoordsR = coordRot(texCoord, timer*0.05 + rotOffset.x);
	
    float tn = pnoise3D(float3(rotCoordsR.x*size.x/(grain_size*1.5), rotCoordsR.y*size.y/(grain_size*1.5), 0.0));
    float3 noise = float3(tn, tn, tn);
  
	if (colored)
	{
		float2 rotCoordsG = coordRot(texCoord, timer*0.05 + rotOffset.y);
		float2 rotCoordsB = coordRot(texCoord, timer*0.05 + rotOffset.z);
        
        float2 rg = rotCoordsG*float2(size.x/(1.5*grain_size),size.y/(1.5*grain_size));
        float2 rb = rotCoordsB*float2(size.x/(1.5*grain_size),size.y/(1.5*grain_size));
		noise.g = mix(noise.r,pnoise3D(float3(rg.x, rg.y,1.0)),coloramount);
		noise.b = mix(noise.r,pnoise3D(float3(rb.x, rb.y,2.0)),coloramount);
	}

	float3 col = sampleLinear(source, texCoord).rgb;

	//noisiness response curve based on scene luminance
	float3 lumcoeff = float3(0.299,0.587,0.114);
	float luminance = mix(0.0,dot(col, lumcoeff),lumamount * .5);
	float lum = smoothStep(0.2,0.0,luminance);
	lum += luminance;
	
	noise = mix(noise,float3(0.0),pow(lum,4.0));
	col = col+noise* 0.025 * grainamount;
   
	dst =  float4(col.r, col.g, col.b,1.0);
}
}
